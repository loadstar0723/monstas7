generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  name            String?
  role            UserRole  @default(SUBSCRIBER)
  subscription    SubscriptionTier @default(FREE)
  companyName     String?
  phoneNumber     String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLoginAt     DateTime?
  
  sessions        Session[]
  accounts        Account[]
  portfolios      Portfolio[]
  alerts          Alert[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  HEADQUARTERS  // 본사
  DISTRIBUTOR   // 총판
  AGENT         // 대리점
  SUBSCRIBER    // 구독자
}

enum SubscriptionTier {
  FREE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
  BLACK
}

// 실제 데이터 연동을 위한 테이블들
model Portfolio {
  id          String    @id @default(cuid())
  userId      String
  symbol      String
  amount      Float
  avgBuyPrice Float
  allocation  Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, symbol])
  @@map("portfolios")
}

model Alert {
  id          String      @id @default(cuid())
  userId      String
  symbol      String
  type        AlertType
  name        String
  description String
  condition   String
  value       Float?
  enabled     Boolean     @default(true)
  channels    String      // JSON array of channels
  priority    AlertPriority @default(MEDIUM)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("alerts")
}

model BacktestResult {
  id            String    @id @default(cuid())
  symbol        String
  pattern       String
  totalTrades   Int
  winRate       Float
  avgProfit     Float
  maxProfit     Float
  maxLoss       Float
  profitFactor  Float
  sharpeRatio   Float
  maxDrawdown   Float
  confidence    Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  trades        BacktestTrade[]
  
  @@unique([symbol, pattern])
  @@map("backtest_results")
}

model BacktestTrade {
  id              String    @id @default(cuid())
  backtestId      String
  date            String
  entryPrice      Float
  exitPrice       Float
  profit          Float
  duration        String
  result          TradeResult
  
  backtest        BacktestResult @relation(fields: [backtestId], references: [id], onDelete: Cascade)
  
  @@map("backtest_trades")
}

model MarketData {
  id              String    @id @default(cuid())
  symbol          String
  price           Float
  volume24h       Float
  marketCap       Float?
  dominance       Float?
  fearGreedIndex  Int?
  rsi             Float?
  macd            Float?
  timestamp       DateTime  @default(now())
  
  @@unique([symbol, timestamp])
  @@map("market_data")
}

model TradingSignal {
  id          String        @id @default(cuid())
  symbol      String
  type        SignalType
  entryPrice  Float
  stopLoss    Float
  targets     String        // JSON array of targets
  confidence  Int
  strategy    String
  status      SignalStatus  @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@map("trading_signals")
}

enum AlertType {
  PRICE
  PATTERN
  VOLUME
  INDICATOR
  NEWS
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH
}

enum TradeResult {
  WIN
  LOSS
}

enum SignalType {
  LONG
  SHORT
}

enum SignalStatus {
  ACTIVE
  FILLED
  CANCELLED
}