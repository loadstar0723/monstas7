'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { socialSentimentService, type SocialMention, type MarketCorrelation, type EconomicIndicator } from '@/lib/services/socialSentimentService'
import { Line, Bar, Doughnut } from 'react-chartjs-2'
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
} from 'chart.js'

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
)

// 번역 함수
const translateText = async (text: string, toKorean: boolean) => {
  try {
    const response = await fetch('/api/translate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        text,
        targetLang: toKorean ? 'ko' : 'en'
      })
    })
    const data = await response.json()
    return data.translatedText || text
  } catch (error) {
    console.error('번역 실패:', error)
    return text
  }
}

export default function SocialAnalysisPage() {
  const [selectedSymbol, setSelectedSymbol] = useState('BTC')
  const [redditMentions, setRedditMentions] = useState<SocialMention[]>([])
  const [twitterMentions, setTwitterMentions] = useState<SocialMention[]>([])
  const [correlation, setCorrelation] = useState<MarketCorrelation | null>(null)
  const [economicIndicators, setEconomicIndicators] = useState<EconomicIndicator[]>([])
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState<'reddit' | 'twitter' | 'correlation' | 'economy'>('reddit')
  const [isKorean, setIsKorean] = useState(true) // 기본값을 한국어로 설정
  const [translating, setTranslating] = useState(false)
  const [translatedMentions, setTranslatedMentions] = useState<Record<string, string>>({})

  const symbols = [
    'ALL', 'BTC', 'ETH', 'BNB', 'SOL', 'XRP', 'ADA', 'DOGE', 'AVAX', 'MATIC',
    'LINK', 'DOT', 'UNI', 'ATOM', 'LTC', 'ETC', 'ICP', 'FIL', 'APT', 'ARB',
    'OP', 'NEAR', 'VET', 'ALGO', 'FTM', 'GRT', 'SAND', 'MANA', 'AXS', 'THETA',
    'EGLD', 'FLOW', 'XTZ', 'CHZ', 'ENJ', 'ZIL', 'HBAR', 'KLAY', 'CRV', 'MKR',
    'AAVE', 'SNX', 'COMP', 'YFI', 'SUSHI', 'UMA', 'ZRX', 'BAT', 'ENS', 'LDO',
    'IMX', 'WLD', 'SEI', 'SUI', 'TIA', 'BLUR', 'JTO', 'PYTH', 'JUP', 'STRK'
  ]

  useEffect(() => {
    fetchSocialData()
  }, [selectedSymbol])

  // 언어 변경 시 모든 멘션 번역
  useEffect(() => {
    if (isKorean) {
      translateAllMentions()
    }
  }, [isKorean, redditMentions, twitterMentions])

  const fetchSocialData = async () => {
    setLoading(true)
    try {
      // ALL 선택 시 상위 10개 코인 분석
      const symbolsToFetch = selectedSymbol === 'ALL'
        ? ['BTC', 'ETH', 'BNB', 'SOL', 'XRP', 'ADA', 'DOGE', 'AVAX', 'MATIC', 'LINK']
        : [selectedSymbol]

      const [reddit, twitter, corr, econ] = await Promise.all([
        socialSentimentService.fetchRedditMentions(symbolsToFetch),
        socialSentimentService.fetchTwitterMentions(symbolsToFetch),
        selectedSymbol === 'ALL'
          ? Promise.resolve(null)
          : socialSentimentService.analyzeNewsCorrelation(selectedSymbol),
        socialSentimentService.fetchEconomicIndicators()
      ])

      setRedditMentions(reddit)
      setTwitterMentions(twitter)
      setCorrelation(corr)
      setEconomicIndicators(econ)
    } catch (error) {
      console.error('소셜 데이터 가져오기 실패:', error)
    } finally {
      setLoading(false)
    }
  }

  const translateAllMentions = async () => {
    if (!isKorean) {
      setTranslatedMentions({})
      return
    }

    setTranslating(true)
    try {
      const allMentions = [...redditMentions, ...twitterMentions]
      const translations: Record<string, string> = {}

      // 배치로 번역 처리
      for (const mention of allMentions) {
        if (!translatedMentions[mention.id]) {
          const translated = await translateText(mention.content, true)
          translations[mention.id] = translated
        } else {
          translations[mention.id] = translatedMentions[mention.id]
        }
      }

      setTranslatedMentions(translations)
    } catch (error) {
      console.error('번역 실패:', error)
    } finally {
      setTranslating(false)
    }
  }

  const calculateSentiment = (mentions: SocialMention[]) => {
    const positive = mentions.filter(m => m.sentiment === 'positive').length
    const negative = mentions.filter(m => m.sentiment === 'negative').length
    const neutral = mentions.filter(m => m.sentiment === 'neutral').length
    return { positive, negative, neutral }
  }

  const sentimentChartData = {
    labels: ['긍정적', '부정적', '중립'],
    datasets: [{
      data: (() => {
        const mentions = activeTab === 'reddit' ? redditMentions : twitterMentions
        const sentiment = calculateSentiment(mentions)
        return [sentiment.positive, sentiment.negative, sentiment.neutral]
      })(),
      backgroundColor: ['#10b981', '#ef4444', '#6b7280'],
      borderWidth: 0
    }]
  }

  const correlationChartData = {
    labels: ['뉴스 영향도', '소셜 감성', '가격 상관관계', '거래량 영향'],
    datasets: [{
      label: `${selectedSymbol} 상관관계 분석`,
      data: correlation ? [
        correlation.newsImpact,
        correlation.socialSentiment,
        correlation.priceCorrelation * 100,
        correlation.volumeImpact
      ] : [],
      backgroundColor: 'rgba(139, 92, 246, 0.2)',
      borderColor: 'rgba(139, 92, 246, 1)',
      borderWidth: 2
    }]
  }

  const economicChartData = {
    labels: economicIndicators.map(e => e.name),
    datasets: [{
      label: '암호화폐 상관관계',
      data: economicIndicators.map(e => e.cryptoCorrelation * 100),
      backgroundColor: economicIndicators.map(e =>
        e.cryptoCorrelation > 0 ? 'rgba(16, 185, 129, 0.5)' : 'rgba(239, 68, 68, 0.5)'
      ),
      borderColor: economicIndicators.map(e =>
        e.cryptoCorrelation > 0 ? '#10b981' : '#ef4444'
      ),
      borderWidth: 2
    }]
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        {/* 헤더 */}
        <div className="mb-8 flex justify-between items-start">
          <div>
            <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
              🌐 소셜 미디어 & 경제 상관관계 분석
            </h1>
            <p className="text-gray-400">Reddit, Twitter 실시간 감성 분석 및 경제 지표 연동</p>
          </div>
          <button
            onClick={() => setIsKorean(!isKorean)}
            className="px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg font-semibold transition-all flex items-center gap-2"
            disabled={translating}
          >
            🌐 {isKorean ? '영어로 보기' : '한국어로 보기'}
            {translating && <span className="animate-spin">⏳</span>}
          </button>
        </div>

        {/* 심볼 선택 */}
        <div className="flex flex-wrap gap-2 mb-6">
          {symbols.map(symbol => (
            <button
              key={symbol}
              onClick={() => setSelectedSymbol(symbol)}
              className={`px-4 py-2 rounded-lg font-semibold transition-all ${
                selectedSymbol === symbol
                  ? 'bg-purple-600 text-white'
                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
              }`}
            >
              {symbol === 'ALL' ? '🌍 전체' : symbol}
            </button>
          ))}
        </div>

        {/* 탭 메뉴 */}
        <div className="flex space-x-2 mb-6 border-b border-gray-700">
          <button
            onClick={() => setActiveTab('reddit')}
            className={`px-4 py-2 font-semibold transition-all ${
              activeTab === 'reddit'
                ? 'text-purple-400 border-b-2 border-purple-400'
                : 'text-gray-400 hover:text-white'
            }`}
          >
            Reddit 분석
          </button>
          <button
            onClick={() => setActiveTab('twitter')}
            className={`px-4 py-2 font-semibold transition-all ${
              activeTab === 'twitter'
                ? 'text-purple-400 border-b-2 border-purple-400'
                : 'text-gray-400 hover:text-white'
            }`}
          >
            Twitter 분석
          </button>
          <button
            onClick={() => setActiveTab('correlation')}
            className={`px-4 py-2 font-semibold transition-all ${
              activeTab === 'correlation'
                ? 'text-purple-400 border-b-2 border-purple-400'
                : 'text-gray-400 hover:text-white'
            }`}
          >
            뉴스 상관관계
          </button>
          <button
            onClick={() => setActiveTab('economy')}
            className={`px-4 py-2 font-semibold transition-all ${
              activeTab === 'economy'
                ? 'text-purple-400 border-b-2 border-purple-400'
                : 'text-gray-400 hover:text-white'
            }`}
          >
            경제 지표
          </button>
        </div>

        {loading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-400"></div>
          </div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* 왼쪽: 멘션 리스트 */}
            <div className="bg-gray-800 rounded-xl p-6">
              <h2 className="text-xl font-bold mb-4">
                {activeTab === 'reddit' && '🔥 Reddit 인기 멘션'}
                {activeTab === 'twitter' && '🐦 Twitter 트렌딩'}
                {activeTab === 'correlation' && '📊 뉴스-가격 상관관계'}
                {activeTab === 'economy' && '💹 경제 지표 영향도'}
              </h2>

              {(activeTab === 'reddit' || activeTab === 'twitter') && (
                <div className="space-y-4 max-h-96 overflow-y-auto">
                  {(activeTab === 'reddit' ? redditMentions : twitterMentions).map(mention => (
                    <motion.div
                      key={mention.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="bg-gray-700 rounded-lg p-4"
                    >
                      <div className="flex justify-between items-start mb-2">
                        <span className="font-semibold text-purple-400">{mention.author}</span>
                        <span className={`px-2 py-1 rounded text-xs ${
                          mention.sentiment === 'positive' ? 'bg-green-600' :
                          mention.sentiment === 'negative' ? 'bg-red-600' : 'bg-gray-600'
                        }`}>
                          {mention.sentiment === 'positive' ? '긍정' :
                           mention.sentiment === 'negative' ? '부정' : '중립'}
                        </span>
                      </div>
                      <p className="text-gray-300 text-sm mb-2">
                        {isKorean && translatedMentions[mention.id]
                          ? translatedMentions[mention.id]
                          : mention.content}
                      </p>
                      <div className="flex justify-between text-xs text-gray-500">
                        <span>👍 {mention.engagement.likes} | 💬 {mention.engagement.comments} | 🔄 {mention.engagement.shares}</span>
                        <span>{new Date(mention.timestamp).toLocaleTimeString('ko-KR')}</span>
                      </div>
                    </motion.div>
                  ))}
                </div>
              )}

              {activeTab === 'correlation' && correlation && (
                <div className="space-y-4">
                  <div className="bg-gray-700 rounded-lg p-4">
                    <h3 className="font-semibold mb-2">뉴스 영향도</h3>
                    <div className="flex items-center">
                      <div className="flex-1 bg-gray-600 rounded-full h-4">
                        <div
                          className="bg-gradient-to-r from-purple-500 to-pink-500 h-4 rounded-full"
                          style={{ width: `${correlation.newsImpact}%` }}
                        />
                      </div>
                      <span className="ml-3 font-bold">{correlation.newsImpact}%</span>
                    </div>
                  </div>
                  <div className="bg-gray-700 rounded-lg p-4">
                    <h3 className="font-semibold mb-2">소셜 감성 점수</h3>
                    <div className="flex items-center">
                      <div className="flex-1 bg-gray-600 rounded-full h-4">
                        <div
                          className="bg-gradient-to-r from-blue-500 to-cyan-500 h-4 rounded-full"
                          style={{ width: `${correlation.socialSentiment}%` }}
                        />
                      </div>
                      <span className="ml-3 font-bold">{correlation.socialSentiment}%</span>
                    </div>
                  </div>
                  <div className="bg-gray-700 rounded-lg p-4">
                    <h3 className="font-semibold mb-2">가격 상관관계</h3>
                    <div className="text-3xl font-bold text-center">
                      {(correlation.priceCorrelation * 100).toFixed(1)}%
                    </div>
                    <p className="text-sm text-gray-400 text-center mt-2">
                      {correlation.priceCorrelation > 0.7 ? '매우 강한 상관관계' :
                       correlation.priceCorrelation > 0.4 ? '보통 상관관계' : '약한 상관관계'}
                    </p>
                  </div>
                </div>
              )}

              {activeTab === 'economy' && (
                <div className="space-y-3">
                  {economicIndicators.map((indicator, index) => (
                    <div key={index} className="bg-gray-700 rounded-lg p-4">
                      <div className="flex justify-between items-center mb-2">
                        <h3 className="font-semibold">{indicator.name}</h3>
                        <span className={`px-2 py-1 rounded text-xs ${
                          indicator.impact === 'high' ? 'bg-red-600' :
                          indicator.impact === 'medium' ? 'bg-yellow-600' : 'bg-gray-600'
                        }`}>
                          {indicator.impact === 'high' ? '높음' :
                           indicator.impact === 'medium' ? '중간' : '낮음'}
                        </span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span>현재: {indicator.value}</span>
                        <span className={indicator.change > 0 ? 'text-green-400' : 'text-red-400'}>
                          {indicator.change > 0 ? '+' : ''}{indicator.change}%
                        </span>
                      </div>
                      <div className="mt-2">
                        <div className="text-xs text-gray-400">암호화폐 상관관계</div>
                        <div className={`text-lg font-bold ${
                          indicator.cryptoCorrelation > 0 ? 'text-green-400' : 'text-red-400'
                        }`}>
                          {(indicator.cryptoCorrelation * 100).toFixed(1)}%
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* 오른쪽: 차트 */}
            <div className="space-y-6">
              {(activeTab === 'reddit' || activeTab === 'twitter') && (
                <>
                  <div className="bg-gray-800 rounded-xl p-6">
                    <h2 className="text-xl font-bold mb-4">감성 분석 차트</h2>
                    <Doughnut
                      data={sentimentChartData}
                      options={{
                        responsive: true,
                        plugins: {
                          legend: {
                            position: 'bottom',
                            labels: { color: 'white' }
                          }
                        }
                      }}
                    />
                  </div>
                  <div className="bg-gray-800 rounded-xl p-6">
                    <h2 className="text-xl font-bold mb-4">종합 감성 점수</h2>
                    <div className="text-center">
                      <div className="text-5xl font-bold mb-2">
                        {socialSentimentService.calculateOverallSentiment(
                          activeTab === 'reddit' ? redditMentions : twitterMentions
                        ).toFixed(0)}
                      </div>
                      <div className="text-gray-400">
                        {socialSentimentService.calculateOverallSentiment(
                          activeTab === 'reddit' ? redditMentions : twitterMentions
                        ) > 60 ? '🚀 매우 긍정적' :
                         socialSentimentService.calculateOverallSentiment(
                          activeTab === 'reddit' ? redditMentions : twitterMentions
                        ) > 40 ? '😊 긍정적' :
                         socialSentimentService.calculateOverallSentiment(
                          activeTab === 'reddit' ? redditMentions : twitterMentions
                        ) > -40 ? '😐 중립' :
                         socialSentimentService.calculateOverallSentiment(
                          activeTab === 'reddit' ? redditMentions : twitterMentions
                        ) > -60 ? '😟 부정적' : '😱 매우 부정적'}
                      </div>
                    </div>
                  </div>
                </>
              )}

              {activeTab === 'correlation' && (
                <div className="bg-gray-800 rounded-xl p-6">
                  <h2 className="text-xl font-bold mb-4">상관관계 분석 차트</h2>
                  <Bar
                    data={correlationChartData}
                    options={{
                      responsive: true,
                      scales: {
                        y: {
                          beginAtZero: true,
                          max: 100,
                          ticks: { color: 'white' },
                          grid: { color: 'rgba(255,255,255,0.1)' }
                        },
                        x: {
                          ticks: { color: 'white' },
                          grid: { color: 'rgba(255,255,255,0.1)' }
                        }
                      },
                      plugins: {
                        legend: {
                          labels: { color: 'white' }
                        }
                      }
                    }}
                  />
                </div>
              )}

              {activeTab === 'economy' && (
                <div className="bg-gray-800 rounded-xl p-6">
                  <h2 className="text-xl font-bold mb-4">경제 지표 상관관계</h2>
                  <Bar
                    data={economicChartData}
                    options={{
                      responsive: true,
                      scales: {
                        y: {
                          beginAtZero: true,
                          min: -100,
                          max: 100,
                          ticks: {
                            color: 'white',
                            callback: (value) => value + '%'
                          },
                          grid: { color: 'rgba(255,255,255,0.1)' }
                        },
                        x: {
                          ticks: { color: 'white' },
                          grid: { color: 'rgba(255,255,255,0.1)' }
                        }
                      },
                      plugins: {
                        legend: {
                          labels: { color: 'white' }
                        }
                      }
                    }}
                  />
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}