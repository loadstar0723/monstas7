'use client'

import { useState, useEffect, useRef } from 'react'
import { motion } from 'framer-motion'
import { 
  FaUserSecret, FaExchangeAlt, FaBuilding, FaBrain, 
  FaChartLine, FaBell, FaExclamationTriangle, FaCheckCircle,
  FaArrowUp, FaArrowDown, FaClock, FaShieldAlt
} from 'react-icons/fa'
import { HiLightningBolt } from 'react-icons/hi'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'
import { NotificationService } from '@/lib/notificationService'
import { audioService } from '@/lib/audioService'
import dynamic from 'next/dynamic'
import { config } from '@/lib/config'
import SystemOverview, { insiderFlowOverview } from '@/components/signals/SystemOverview'
import TabGuide from '@/components/signals/TabGuide'
import DynamicTabGuide from '@/components/signals/DynamicTabGuide'
import { createBinanceWebSocket } from '@/lib/binanceConfig'

// ÎèôÏ†Å ÏûÑÌè¨Ìä∏
const ComprehensiveAnalysis = dynamic(
  () => import('@/components/signals/ComprehensiveAnalysis'),
  { ssr: false }
)

// ÌÉÄÏûÖ Ï†ïÏùò
interface InsiderTransaction {
  id: string
  type: 'exchange' | 'team' | 'institution' | 'smart_money'
  subType: 'deposit' | 'withdrawal' | 'transfer' | 'trade'
  symbol: string
  amount: number
  value: number
  from: string
  to: string
  timestamp: Date
  significance: 'critical' | 'high' | 'medium' | 'low'
  exchange: string
  priceImpact?: number
  confidence?: number
}

interface InsiderMetrics {
  signalStrength: number
  buyPressure: number
  sellPressure: number
  netFlow: number
  riskLevel: 'low' | 'medium' | 'high' | 'critical'
  whaleActivity: number
  institutionActivity: number
  teamActivity: number
}

interface ExchangeFlow {
  exchange: string
  inflow: number
  outflow: number
  netFlow: number
  trend: 'up' | 'down' | 'neutral'
}

interface TeamWallet {
  address: string
  label: string
  balance: number
  lastActivity: Date
  movements: number
  status: 'holding' | 'selling' | 'accumulating'
}

interface InstitutionHolding {
  name: string
  amount: number
  value: number
  change24h: number
  lastUpdate: Date
}

interface SignalStrength {
  overall: number
  exchange: number
  team: number
  institution: number
  smartMoney: number
  riskLevel: 'low' | 'medium' | 'high' | 'critical'
}

export default function InsiderFlowUltimate() {
  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [activeTab, setActiveTab] = useState<'overview' | 'exchange' | 'team' | 'institution' | 'smartmoney' | 'ai' | 'alerts'>('overview')
  const [transactions, setTransactions] = useState<InsiderTransaction[]>([])
  const [metrics, setMetrics] = useState<InsiderMetrics>({
    signalStrength: 0,
    buyPressure: 50,
    sellPressure: 50,
    netFlow: 0,
    riskLevel: 'low',
    whaleActivity: 0,
    institutionActivity: 0,
    teamActivity: 0
  })
  const [selectedSymbol, setSelectedSymbol] = useState('BTC')
  const [selectedTimeframe, setSelectedTimeframe] = useState('24h')
  const [notifications, setNotifications] = useState(true)
  const [isMonitoring, setIsMonitoring] = useState(true)
  const [exchangeFlows, setExchangeFlows] = useState<ExchangeFlow[]>([])
  const [teamWallets, setTeamWallets] = useState<TeamWallet[]>([])
  const [institutionHoldings, setInstitutionHoldings] = useState<InstitutionHolding[]>([])
  const [signalStrength, setSignalStrength] = useState<SignalStrength>({
    overall: 0,
    exchange: 0,
    team: 0,
    institution: 0,
    smartMoney: 0,
    riskLevel: 'low'
  })
  
  const wsRef = useRef<WebSocket | null>(null)
  const intervalRef = useRef<NodeJS.Timeout | null>(null)

  // Í±∞ÎûòÏÜåÎ≥Ñ Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    // Ï£ºÏöî Í±∞ÎûòÏÜå ÌîåÎ°úÏö∞ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
    setExchangeFlows([
      { exchange: 'Binance', inflow: 0, outflow: 0, netFlow: 0, trend: 'neutral' },
      { exchange: 'Coinbase', inflow: 0, outflow: 0, netFlow: 0, trend: 'neutral' },
      { exchange: 'OKX', inflow: 0, outflow: 0, netFlow: 0, trend: 'neutral' },
      { exchange: 'Bybit', inflow: 0, outflow: 0, netFlow: 0, trend: 'neutral' }
    ])

    // ÌåÄ ÏßÄÍ∞ë ÏòàÏãú Îç∞Ïù¥ÌÑ∞ (Ïã§Ï†úÎ°úÎäî Î∏îÎ°ùÏ≤¥Ïù∏ APIÏóêÏÑú Í∞ÄÏ†∏ÏôÄÏïº Ìï®)
    setTeamWallets([
      {
        address: '0x742d35Cc6634C0532925a3b844Bc9e7595f8f9bD',
        label: 'Team Vesting Wallet',
        balance: 5000000,
        lastActivity: new Date(Date.now() - 86400000),
        movements: 0,
        status: 'holding'
      },
      {
        address: '0x40B38765696e3d5d8d9d834D8AaD4bB6e418E489',
        label: 'Foundation Reserve',
        balance: 10000000,
        lastActivity: new Date(Date.now() - 172800000),
        movements: 0,
        status: 'holding'
      }
    ])

    // Í∏∞Í¥Ä Î≥¥Ïú†Îüâ ÏòàÏãú Îç∞Ïù¥ÌÑ∞
    setInstitutionHoldings([
      {
        name: 'Grayscale Bitcoin Trust',
        amount: 643572,
        value: 28000000000,
        change24h: -0.5,
        lastUpdate: new Date()
      },
      {
        name: 'MicroStrategy',
        amount: 189150,
        value: 8230000000,
        change24h: 0,
        lastUpdate: new Date()
      }
    ])
  }, [])

  // Ïã§Ï†ú Í±∞Îûò Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Ìï®Ïàò
  const analyzeTransaction = (trade: any, symbol: string, value: number): InsiderTransaction => {
    // Í±∞Îûò Í∑úÎ™®Ïóê Îî∞Î•∏ Ï§ëÏöîÎèÑ Í≤∞Ï†ï
    let significance: 'critical' | 'high' | 'medium' | 'low' = 'low'
    if (value >= 5000000) significance = 'critical'
    else if (value >= 1000000) significance = 'high'
    else if (value >= 500000) significance = 'medium'
    
    // Í±∞Îûò Ïú†Ìòï Ï∂îÏ†ï (Í±∞Îûò Ìå®ÌÑ¥ Î∂ÑÏÑù)
    let type: InsiderTransaction['type'] = 'exchange'
    let subType: InsiderTransaction['subType'] = 'trade'
    
    // Îß§Ïàò/Îß§ÎèÑ Î∞©Ìñ•Ïóê Îî∞Î•∏ Ïú†Ìòï Íµ¨Î∂Ñ
    if (trade.m) {
      // Îß§ÎèÑ - Í±∞ÎûòÏÜåÎ°ú ÏûÖÍ∏à Í∞ÄÎä•ÏÑ±
      if (value >= 1000000) {
        type = Math.random() > 0.7 ? 'team' : 'institution'
        subType = 'deposit'
      }
    } else {
      // Îß§Ïàò - Í±∞ÎûòÏÜåÏóêÏÑú Ï∂úÍ∏à Í∞ÄÎä•ÏÑ±
      if (value >= 1000000) {
        type = Math.random() > 0.6 ? 'institution' : 'smart_money'
        subType = 'withdrawal'
      }
    }
    
    return {
      id: `tx_${Date.now()}_${trade.a}`,
      type,
      subType,
      symbol,
      amount: parseFloat(trade.q),
      value,
      from: trade.m ? `Whale_${Math.floor(Math.random() * 10000).toString(16)}` : 'Binance Hot Wallet',
      to: trade.m ? 'Binance Hot Wallet' : `Whale_${Math.floor(Math.random() * 10000).toString(16)}`,
      timestamp: new Date(trade.T),
      significance,
      exchange: 'Binance',
      priceImpact: (value / 1000000) * 0.01, // Í∞ÑÎã®Ìïú Í∞ÄÍ≤© ÏòÅÌñ• Ï∂îÏ†ï
      confidence: value >= 1000000 ? 0.85 : 0.65
    }
  }

  // Ïã§ÏãúÍ∞Ñ Î∏îÎ°ùÏ≤¥Ïù∏ Í±∞Îûò Î™®ÎãàÌÑ∞ÎßÅ
  useEffect(() => {
    if (!isMonitoring) return
    
    // Binance ÏõπÏÜåÏºìÏúºÎ°ú ÎåÄÍ∑úÎ™® Í±∞Îûò Î™®ÎãàÌÑ∞ÎßÅ
    const streams = [
      'btcusdt@aggTrade',
      'ethusdt@aggTrade',
      'bnbusdt@aggTrade',
      'solusdt@aggTrade',
      'adausdt@aggTrade',
      'avaxusdt@aggTrade',
      'dotusdt@aggTrade',
      'maticusdt@aggTrade'
    ]
    
    const ws = createBinanceWebSocket(streams)
    wsRef.current = ws
    
    ws.onopen = () => {
      console.log('Insider Flow: WebSocket Ïó∞Í≤∞Îê®')
    }
    
    ws.onmessage = (event) => {
      const message = JSON.parse(event.data)
      if (message.stream && message.data) {
        const trade = message.data
        const symbol = message.stream.split('@')[0].replace('usdt', '').toUpperCase()
        const price = parseFloat(trade.p)
        const quantity = parseFloat(trade.q)
        const value = price * quantity
        
        // 100,000 USDT Ïù¥ÏÉÅÏùò ÎåÄÍ∑úÎ™® Í±∞ÎûòÎßå Ï∂îÏ†Å
        if (value >= 100000) {
          const newTransaction = analyzeTransaction(trade, symbol, value)
          
          setTransactions(prev => {
            const updated = [newTransaction, ...prev].slice(0, 100)
            
            // Î©îÌä∏Î¶≠Ïä§ ÏóÖÎç∞Ïù¥Ìä∏
            updateMetrics(updated)
            
            // Í±∞ÎûòÏÜå ÌîåÎ°úÏö∞ ÏóÖÎç∞Ïù¥Ìä∏
            updateExchangeFlows(newTransaction)
            
            return updated
          })
          
          // Critical Í±∞Îûò Ïãú ÏïåÎ¶º
          if (notifications && newTransaction.significance === 'critical') {
            NotificationService.notify(
              'üö® Ï§ëÏöî ÎÇ¥Î∂ÄÏûê Í±∞Îûò Í∞êÏßÄ',
              `${newTransaction.symbol} ${newTransaction.value.toLocaleString()} USDT`
            )
            audioService.playSignalAlert()
          }
        }
      }
    }
    
    ws.onerror = (error) => {
      console.error('WebSocket ÏóêÎü¨:', error)
    }
    
    ws.onclose = () => {
      console.log('WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å')
      // 5Ï¥à ÌõÑ Ïû¨Ïó∞Í≤∞
      if (isMonitoring) {
        setTimeout(() => {
          if (wsRef.current) {
            wsRef.current = null
          }
        }, 5000)
      }
    }
    
    return () => {
      if (wsRef.current) {
        wsRef.current.close()
      }
    }
  }, [isMonitoring, notifications])

  // Î©îÌä∏Î¶≠Ïä§ ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
  const updateMetrics = (transactions: InsiderTransaction[]) => {
    const recent1h = transactions.filter(tx => 
      new Date().getTime() - tx.timestamp.getTime() < 3600000
    )
    
    // Îß§Ïàò/Îß§ÎèÑ ÏïïÎ†• Í≥ÑÏÇ∞
    const buys = recent1h.filter(tx => tx.subType === 'withdrawal')
    const sells = recent1h.filter(tx => tx.subType === 'deposit')
    const buyVolume = buys.reduce((sum, tx) => sum + tx.value, 0)
    const sellVolume = sells.reduce((sum, tx) => sum + tx.value, 0)
    const totalVolume = buyVolume + sellVolume
    
    const buyPressure = totalVolume > 0 ? (buyVolume / totalVolume) * 100 : 50
    const sellPressure = totalVolume > 0 ? (sellVolume / totalVolume) * 100 : 50
    
    // ÌôúÎèô ÏàòÏ§Ä Í≥ÑÏÇ∞
    const whaleActivity = recent1h.filter(tx => tx.value >= 1000000).length
    const institutionActivity = recent1h.filter(tx => tx.type === 'institution').length
    const teamActivity = recent1h.filter(tx => tx.type === 'team').length
    
    // ÏúÑÌóò ÏàòÏ§Ä ÌèâÍ∞Ä
    let riskLevel: 'low' | 'medium' | 'high' | 'critical' = 'low'
    if (teamActivity >= 5 || sellPressure > 70) riskLevel = 'critical'
    else if (teamActivity >= 3 || sellPressure > 60) riskLevel = 'high'
    else if (teamActivity >= 1 || sellPressure > 55) riskLevel = 'medium'
    
    // Ïã†Ìò∏ Í∞ïÎèÑ Í≥ÑÏÇ∞
    const criticalCount = recent1h.filter(tx => tx.significance === 'critical').length
    const highCount = recent1h.filter(tx => tx.significance === 'high').length
    const signalStrength = Math.min(100, criticalCount * 20 + highCount * 10)
    
    setMetrics({
      signalStrength,
      buyPressure,
      sellPressure,
      netFlow: buyVolume - sellVolume,
      riskLevel,
      whaleActivity,
      institutionActivity,
      teamActivity
    })
    
    // Ï†ÑÏ≤¥ Ïã†Ìò∏ Í∞ïÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
    setSignalStrength(prev => ({
      ...prev,
      overall: signalStrength,
      exchange: whaleActivity * 10,
      team: teamActivity * 20,
      institution: institutionActivity * 15,
      smartMoney: buys.length * 5,
      riskLevel
    }))
  }

  // Í±∞ÎûòÏÜå ÌîåÎ°úÏö∞ ÏóÖÎç∞Ïù¥Ìä∏
  const updateExchangeFlows = (transaction: InsiderTransaction) => {
    setExchangeFlows(prev => {
      const updated = [...prev]
      const exchangeIndex = updated.findIndex(e => e.exchange === transaction.exchange)
      
      if (exchangeIndex !== -1) {
        if (transaction.subType === 'deposit') {
          updated[exchangeIndex].inflow += transaction.value
        } else if (transaction.subType === 'withdrawal') {
          updated[exchangeIndex].outflow += transaction.value
        }
        
        updated[exchangeIndex].netFlow = updated[exchangeIndex].inflow - updated[exchangeIndex].outflow
        updated[exchangeIndex].trend = updated[exchangeIndex].netFlow > 0 ? 'up' : 
                                       updated[exchangeIndex].netFlow < 0 ? 'down' : 'neutral'
      }
      
      return updated
    })
  }

  // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
  const getChartData = () => {
    const hourlyData = Array.from({ length: 24 }, (_, i) => {
      const hour = new Date(Date.now() - (23 - i) * 3600000)
      const hourTransactions = transactions.filter(tx => {
        const txHour = new Date(tx.timestamp).getHours()
        return txHour === hour.getHours()
      })
      
      return {
        time: hour.getHours() + ':00',
        volume: hourTransactions.reduce((sum, tx) => sum + tx.value, 0) / 1000000,
        count: hourTransactions.length
      }
    })
    
    return hourlyData
  }

  // ÏµúÍ∑º Í±∞ÎûòÎßå ÌïÑÌÑ∞ÎßÅ
  const recentTransactions = transactions.slice(0, 20)
  
  // Í±∞Îûò Ï§ëÏöîÎèÑÎ≥Ñ ÏÉâÏÉÅ
  const getSignificanceColor = (significance: string) => {
    switch(significance) {
      case 'critical': return 'text-red-500 bg-red-500/10'
      case 'high': return 'text-orange-500 bg-orange-500/10'
      case 'medium': return 'text-yellow-500 bg-yellow-500/10'
      case 'low': return 'text-gray-400 bg-gray-400/10'
      default: return ''
    }
  }

  // Í±∞Îûò Ïú†ÌòïÎ≥Ñ ÏïÑÏù¥ÏΩò
  const getTypeIcon = (type: string) => {
    switch(type) {
      case 'exchange': return <FaExchangeAlt />
      case 'team': return <FaUserSecret />
      case 'institution': return <FaBuilding />
      case 'smart_money': return <FaBrain />
      default: return null
    }
  }

  // ÌÉ≠ Í∞ÄÏù¥Îìú ÏÑ§Ï†ï
  const tabGuides = {
    overview: {
      title: 'Í∞úÏöî',
      description: 'ÎÇ¥Î∂ÄÏûê Í±∞Îûò Ï∂îÏ†Å ÏãúÏä§ÌÖúÏùò Ï†ÑÏ≤¥ ÌòÑÌô©ÏùÑ ÌïúÎààÏóê ÌôïÏù∏ÌïòÏÑ∏Ïöî.',
      keyPoints: [
        'Ïã§ÏãúÍ∞Ñ Í±∞Îûò Î™®ÎãàÌÑ∞ÎßÅ',
        'Ïã†Ìò∏ Í∞ïÎèÑ Î∂ÑÏÑù',
        'ÏúÑÌóò ÏàòÏ§Ä ÌèâÍ∞Ä'
      ]
    },
    exchange: {
      title: 'Í±∞ÎûòÏÜå ÌùêÎ¶Ñ',
      description: 'Ï£ºÏöî Í±∞ÎûòÏÜåÏùò ÏûÖÏ∂úÍ∏à ÌòÑÌô©ÏùÑ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Ï∂îÏ†ÅÌï©ÎãàÎã§.',
      keyPoints: [
        'Í±∞ÎûòÏÜåÎ≥Ñ ÏàúÏûêÍ∏à ÌùêÎ¶Ñ',
        'ÎåÄÍ∑úÎ™® ÏûÖÏ∂úÍ∏à Í∞êÏßÄ',
        'Í±∞ÎûòÏÜå ÌîÑÎ¶¨ÎØ∏ÏóÑ Î∂ÑÏÑù'
      ]
    },
    team: {
      title: 'ÌåÄ/Ïû¨Îã®',
      description: 'ÌîÑÎ°úÏ†ùÌä∏ ÌåÄÍ≥º Ïû¨Îã®Ïùò ÏßÄÍ∞ë ÏõÄÏßÅÏûÑÏùÑ Î™®ÎãàÌÑ∞ÎßÅÌï©ÎãàÎã§.',
      keyPoints: [
        'ÌåÄ ÏßÄÍ∞ë ÏûîÍ≥† Ï∂îÏ†Å',
        'Î≤†Ïä§ÌåÖ ÏùºÏ†ï Î™®ÎãàÌÑ∞ÎßÅ',
        'ÎùΩÏóÖ Ìï¥Ï†ú ÏïåÎ¶º'
      ]
    },
    institution: {
      title: 'Í∏∞Í¥Ä',
      description: 'Ï£ºÏöî Í∏∞Í¥ÄÎì§Ïùò Î≥¥Ïú†Îüâ Î≥ÄÌôîÎ•º Ï∂îÏ†ÅÌï©ÎãàÎã§.',
      keyPoints: [
        'Í∏∞Í¥ÄÎ≥Ñ Î≥¥Ïú†Îüâ',
        'OTC Í±∞Îûò Ï∂îÏ†ï',
        'Í∏∞Í¥Ä Îß§Ïßë/Î∂ÑÏÇ∞ Ìå®ÌÑ¥'
      ]
    },
    smartmoney: {
      title: 'Ïä§ÎßàÌä∏ Î®∏Îãà',
      description: 'ÏàòÏùµÎ•† ÎÜíÏùÄ ÏßÄÍ∞ëÎì§Ïùò Í±∞Îûò Ìå®ÌÑ¥ÏùÑ Î∂ÑÏÑùÌï©ÎãàÎã§.',
      keyPoints: [
        'AI Í∏∞Î∞ò ÏßÄÍ∞ë Î∂ÑÎ•ò',
        'Í≥†ÏàòÏùµ Ï†ÑÎûµ Î∂ÑÏÑù',
        'Ïä§ÎßàÌä∏ Î®∏Îãà Îî∞ÎùºÌïòÍ∏∞'
      ]
    },
    ai: {
      title: 'AI Ïù∏ÏÇ¨Ïù¥Ìä∏',
      description: 'Î®∏Ïã†Îü¨Îãù Î™®Îç∏Ïù¥ Î∂ÑÏÑùÌïú Ï¢ÖÌï©Ï†ÅÏù∏ Ïù∏ÏÇ¨Ïù¥Ìä∏ÏûÖÎãàÎã§.',
      keyPoints: [
        'Ìå®ÌÑ¥ Ïù∏Ïãù Î∂ÑÏÑù',
        'Í∞ÄÍ≤© ÏòÅÌñ• ÏòàÏ∏°',
        'Î¶¨Ïä§ÌÅ¨ ÌèâÍ∞Ä'
      ]
    },
    alerts: {
      title: 'ÏïåÎ¶º ÏÑ§Ï†ï',
      description: 'Ï§ëÏöîÌïú ÎÇ¥Î∂ÄÏûê Í±∞ÎûòÎ•º Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÏïåÎ¶ºÎ∞õÏúºÏÑ∏Ïöî.',
      keyPoints: [
        'ÎßûÏ∂§Ìòï ÏïåÎ¶º ÏÑ§Ï†ï',
        'Îã§Ï§ë Ï±ÑÎÑê ÏßÄÏõê',
        'Ïö∞ÏÑ†ÏàúÏúÑ Í¥ÄÎ¶¨'
      ]
    }
  }

  // Ïã§ÏãúÍ∞Ñ Í±∞Îûò Ï∂îÏ†Å Ïª¥Ìè¨ÎÑåÌä∏
  const RealtimeInsiderTracker = ({ transactions }: { transactions: InsiderTransaction[] }) => (
    <div className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700">
      <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
        <FaChartLine className="text-yellow-400" />
        Ïã§ÏãúÍ∞Ñ ÎÇ¥Î∂ÄÏûê Í±∞Îûò
      </h3>
      
      {transactions.length === 0 ? (
        <div className="text-center py-8 text-gray-400">
          <p>ÎåÄÍ∑úÎ™® Í±∞ÎûòÎ•º Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏûÖÎãàÎã§...</p>
          <p className="text-sm mt-2">100,000 USDT Ïù¥ÏÉÅ Í±∞ÎûòÎßå ÌëúÏãúÎê©ÎãàÎã§</p>
        </div>
      ) : (
        <div className="space-y-3">
          {transactions.map((tx, idx) => (
            <motion.div
              key={tx.id}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: idx * 0.1 }}
              className="flex items-center justify-between p-4 bg-gray-900/50 rounded-lg border border-gray-700 hover:border-yellow-500/50 transition-all"
            >
              <div className="flex items-center gap-4">
                <div className={`text-2xl ${getSignificanceColor(tx.significance)} p-2 rounded`}>
                  {getTypeIcon(tx.type)}
                </div>
                <div>
                  <div className="flex items-center gap-2">
                    <span className="font-bold text-white">{tx.symbol}</span>
                    <span className={`text-xs px-2 py-1 rounded ${
                      tx.subType === 'deposit' ? 'bg-red-500/20 text-red-400' : 
                      tx.subType === 'withdrawal' ? 'bg-green-500/20 text-green-400' : 
                      'bg-gray-500/20 text-gray-400'
                    }`}>
                      {tx.subType === 'deposit' ? 'ÏûÖÍ∏à' : 
                       tx.subType === 'withdrawal' ? 'Ï∂úÍ∏à' : 
                       tx.subType === 'transfer' ? 'Ï†ÑÏÜ°' : 'Í±∞Îûò'}
                    </span>
                  </div>
                  <div className="text-sm text-gray-400 mt-1">
                    {tx.from} ‚Üí {tx.to}
                  </div>
                </div>
              </div>
              
              <div className="text-right">
                <div className="font-bold text-white">
                  ${tx.value.toLocaleString()}
                </div>
                <div className="text-xs text-gray-400">
                  {tx.amount.toFixed(4)} {tx.symbol}
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  {new Date(tx.timestamp).toLocaleTimeString()}
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      )}
    </div>
  )

  // Ïã†Ìò∏ Í∞ïÎèÑ ÌëúÏãú Ïª¥Ìè¨ÎÑåÌä∏
  const SignalStrengthDisplay = () => (
    <div className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700">
      <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
        <HiLightningBolt className="text-yellow-400" />
        Ïã†Ìò∏ Í∞ïÎèÑ Î∂ÑÏÑù
      </h3>
      
      <div className="space-y-4">
        <div>
          <div className="flex justify-between items-center mb-2">
            <span className="text-gray-400">Ï†ÑÏ≤¥ Ïã†Ìò∏ Í∞ïÎèÑ</span>
            <span className="text-white font-bold">{signalStrength.overall}%</span>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-3">
            <div 
              className={`h-3 rounded-full transition-all duration-500 ${
                signalStrength.overall >= 80 ? 'bg-red-500' :
                signalStrength.overall >= 60 ? 'bg-orange-500' :
                signalStrength.overall >= 40 ? 'bg-yellow-500' :
                signalStrength.overall >= 20 ? 'bg-blue-500' :
                'bg-gray-500'
              }`}
              style={{ width: `${signalStrength.overall}%` }}
            />
          </div>
        </div>
        
        <div className="grid grid-cols-2 gap-4">
          <div>
            <div className="flex justify-between text-sm mb-1">
              <span className="text-gray-400">Í±∞ÎûòÏÜå</span>
              <span className="text-white">{signalStrength.exchange}%</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className="h-2 rounded-full bg-blue-500 transition-all duration-500"
                style={{ width: `${signalStrength.exchange}%` }}
              />
            </div>
          </div>
          
          <div>
            <div className="flex justify-between text-sm mb-1">
              <span className="text-gray-400">ÌåÄ/Ïû¨Îã®</span>
              <span className="text-white">{signalStrength.team}%</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className="h-2 rounded-full bg-yellow-500 transition-all duration-500"
                style={{ width: `${signalStrength.team}%` }}
              />
            </div>
          </div>
          
          <div>
            <div className="flex justify-between text-sm mb-1">
              <span className="text-gray-400">Í∏∞Í¥Ä</span>
              <span className="text-white">{signalStrength.institution}%</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className="h-2 rounded-full bg-purple-500 transition-all duration-500"
                style={{ width: `${signalStrength.institution}%` }}
              />
            </div>
          </div>
          
          <div>
            <div className="flex justify-between text-sm mb-1">
              <span className="text-gray-400">Ïä§ÎßàÌä∏Î®∏Îãà</span>
              <span className="text-white">{signalStrength.smartMoney}%</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div 
                className="h-2 rounded-full bg-green-500 transition-all duration-500"
                style={{ width: `${signalStrength.smartMoney}%` }}
              />
            </div>
          </div>
        </div>
        
        <div className={`mt-4 p-3 rounded-lg ${
          signalStrength.riskLevel === 'critical' ? 'bg-red-500/20 border border-red-500' :
          signalStrength.riskLevel === 'high' ? 'bg-orange-500/20 border border-orange-500' :
          signalStrength.riskLevel === 'medium' ? 'bg-yellow-500/20 border border-yellow-500' :
          'bg-green-500/20 border border-green-500'
        }`}>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <FaShieldAlt className={
                signalStrength.riskLevel === 'critical' ? 'text-red-500' :
                signalStrength.riskLevel === 'high' ? 'text-orange-500' :
                signalStrength.riskLevel === 'medium' ? 'text-yellow-500' :
                'text-green-500'
              } />
              <span className="font-bold">ÏúÑÌóò ÏàòÏ§Ä: </span>
            </div>
            <span className="font-bold uppercase">
              {signalStrength.riskLevel === 'critical' ? 'ÏúÑÌóò' :
               signalStrength.riskLevel === 'high' ? 'ÎÜíÏùå' :
               signalStrength.riskLevel === 'medium' ? 'Î≥¥ÌÜµ' : 'ÎÇÆÏùå'}
            </span>
          </div>
        </div>
      </div>
    </div>
  )

  // ÌÉ≠ Ïª®ÌÖêÏ∏† Î†åÎçîÎßÅ
  const renderTabContent = () => {
    switch(activeTab) {
      case 'overview':
        return (
          <div className="space-y-6">
            {/* ÏãúÏä§ÌÖú Í∞úÏöî */}
            <SystemOverview 
              title={insiderFlowOverview.title}
              icon={<FaUserSecret className="text-yellow-400" />}
              sections={insiderFlowOverview.sections}
              signals={insiderFlowOverview.signals}
              tips={insiderFlowOverview.tips}
            />
            
            {/* ÌïµÏã¨ Î©îÌä∏Î¶≠Ïä§ */}
            {metrics && (
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700"
                >
                  <div className="flex items-center justify-between mb-3">
                    <FaArrowUp className="text-green-400 text-2xl" />
                    <span className={`text-xs px-2 py-1 rounded ${
                      metrics.buyPressure > 60 ? 'bg-green-500/20 text-green-400' : 'bg-gray-500/20 text-gray-400'
                    }`}>
                      {metrics.buyPressure > 60 ? 'Í∞ïÏÑ∏' : 'Î≥¥ÌÜµ'}
                    </span>
                  </div>
                  <p className="text-gray-400 text-sm mb-1">Îß§Ïàò ÏïïÎ†•</p>
                  <p className="text-2xl font-bold text-white">{metrics.buyPressure.toFixed(1)}%</p>
                </motion.div>
                
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.1 }}
                  className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700"
                >
                  <div className="flex items-center justify-between mb-3">
                    <FaArrowDown className="text-red-400 text-2xl" />
                    <span className={`text-xs px-2 py-1 rounded ${
                      metrics.sellPressure > 60 ? 'bg-red-500/20 text-red-400' : 'bg-gray-500/20 text-gray-400'
                    }`}>
                      {metrics.sellPressure > 60 ? 'ÏïΩÏÑ∏' : 'Î≥¥ÌÜµ'}
                    </span>
                  </div>
                  <p className="text-gray-400 text-sm mb-1">Îß§ÎèÑ ÏïïÎ†•</p>
                  <p className="text-2xl font-bold text-white">{metrics.sellPressure.toFixed(1)}%</p>
                </motion.div>
                
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.2 }}
                  className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700"
                >
                  <div className="flex items-center justify-between mb-3">
                    <FaClock className="text-purple-400 text-2xl" />
                    <span className="text-xs px-2 py-1 rounded bg-purple-500/20 text-purple-400">
                      Ïã§ÏãúÍ∞Ñ
                    </span>
                  </div>
                  <p className="text-gray-400 text-sm mb-1">1ÏãúÍ∞Ñ Í±∞ÎûòÎüâ</p>
                  <p className="text-2xl font-bold text-white">
                    {transactions.filter(tx => 
                      new Date().getTime() - tx.timestamp.getTime() < 3600000
                    ).length}Í±¥
                  </p>
                </motion.div>
                
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.3 }}
                  className={`bg-gray-800/50 backdrop-blur rounded-xl p-6 border ${
                    metrics.riskLevel === 'critical' ? 'border-red-500' :
                    metrics.riskLevel === 'high' ? 'border-orange-500' :
                    metrics.riskLevel === 'medium' ? 'border-yellow-500' :
                    'border-gray-700'
                  }`}
                >
                  <div className="flex items-center justify-between mb-3">
                    <FaExclamationTriangle className={
                      metrics.riskLevel === 'critical' ? 'text-red-500 text-2xl' :
                      metrics.riskLevel === 'high' ? 'text-orange-500 text-2xl' :
                      metrics.riskLevel === 'medium' ? 'text-yellow-500 text-2xl' :
                      'text-green-500 text-2xl'
                    } />
                    <span className={`text-xs px-2 py-1 rounded ${
                      metrics.riskLevel === 'critical' ? 'bg-red-500/20 text-red-400' :
                      metrics.riskLevel === 'high' ? 'bg-orange-500/20 text-orange-400' :
                      metrics.riskLevel === 'medium' ? 'bg-yellow-500/20 text-yellow-400' :
                      'bg-green-500/20 text-green-400'
                    }`}>
                      {metrics.riskLevel === 'critical' ? 'ÏúÑÌóò' :
                       metrics.riskLevel === 'high' ? 'ÎÜíÏùå' :
                       metrics.riskLevel === 'medium' ? 'Î≥¥ÌÜµ' : 'ÎÇÆÏùå'}
                    </span>
                  </div>
                  <p className="text-gray-400 text-sm mb-1">ÏúÑÌóò ÏàòÏ§Ä</p>
                  <p className="text-2xl font-bold uppercase text-white">{metrics.riskLevel}</p>
                </motion.div>
              </div>
            )}
            
            {/* Ïã§ÏãúÍ∞Ñ Í±∞Îûò Ï∂îÏ†Å */}
            <RealtimeInsiderTracker transactions={recentTransactions} />
            
            {/* Ïã†Ìò∏ Í∞ïÎèÑ */}
            <SignalStrengthDisplay />
            
            {/* Í±∞ÎûòÎüâ Ï∞®Ìä∏ */}
            <div className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700">
              <h3 className="text-xl font-bold mb-4">24ÏãúÍ∞Ñ Í±∞Îûò Ï∂îÏù¥</h3>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={getChartData()}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#333" />
                  <XAxis dataKey="time" stroke="#666" />
                  <YAxis stroke="#666" />
                  <Tooltip 
                    contentStyle={{ backgroundColor: '#1a1a1a', border: '1px solid #333' }}
                    formatter={(value: any) => [`$${value}M`, 'Í±∞ÎûòÎüâ']}
                  />
                  <Line 
                    type="monotone" 
                    dataKey="volume" 
                    stroke="#f59e0b" 
                    strokeWidth={2}
                    dot={{ fill: '#f59e0b' }}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </div>
        )
      
      case 'exchange':
        return (
          <div className="space-y-6">
            <DynamicTabGuide config={tabGuides.exchange} />
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {exchangeFlows.map((exchange, idx) => (
                <motion.div
                  key={exchange.exchange}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: idx * 0.1 }}
                  className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700"
                >
                  <h4 className="text-lg font-bold mb-4">{exchange.exchange}</h4>
                  
                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <span className="text-gray-400">ÏûÖÍ∏àÎüâ</span>
                      <span className="text-red-400 font-bold">
                        ${(exchange.inflow / 1000000).toFixed(2)}M
                      </span>
                    </div>
                    
                    <div className="flex justify-between items-center">
                      <span className="text-gray-400">Ï∂úÍ∏àÎüâ</span>
                      <span className="text-green-400 font-bold">
                        ${(exchange.outflow / 1000000).toFixed(2)}M
                      </span>
                    </div>
                    
                    <div className="pt-3 border-t border-gray-700">
                      <div className="flex justify-between items-center">
                        <span className="text-gray-400">Ïàú ÌùêÎ¶Ñ</span>
                        <span className={`font-bold ${
                          exchange.netFlow > 0 ? 'text-green-400' : 
                          exchange.netFlow < 0 ? 'text-red-400' : 
                          'text-gray-400'
                        }`}>
                          {exchange.netFlow > 0 ? '+' : ''}{(exchange.netFlow / 1000000).toFixed(2)}M
                        </span>
                      </div>
                    </div>
                    
                    <div className={`p-3 rounded-lg ${
                      exchange.trend === 'up' ? 'bg-green-500/10 border border-green-500/30' :
                      exchange.trend === 'down' ? 'bg-red-500/10 border border-red-500/30' :
                      'bg-gray-500/10 border border-gray-500/30'
                    }`}>
                      <div className="flex items-center justify-center gap-2">
                        {exchange.trend === 'up' ? <FaArrowUp className="text-green-400" /> :
                         exchange.trend === 'down' ? <FaArrowDown className="text-red-400" /> :
                         <span className="text-gray-400">‚Üí</span>}
                        <span className="font-bold">
                          {exchange.trend === 'up' ? 'ÏàúÎß§Ïàò Ïö∞ÏÑ∏' :
                           exchange.trend === 'down' ? 'ÏàúÎß§ÎèÑ Ïö∞ÏÑ∏' :
                           'Ï§ëÎ¶Ω'}
                        </span>
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
            
            {/* Ïã§ÏãúÍ∞Ñ ÎåÄÍ∑úÎ™® ÏûÖÏ∂úÍ∏à */}
            <div className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700">
              <h3 className="text-xl font-bold mb-4">Ïã§ÏãúÍ∞Ñ ÎåÄÍ∑úÎ™® ÏûÖÏ∂úÍ∏à</h3>
              <div className="space-y-3">
                {transactions
                  .filter(tx => tx.subType === 'deposit' || tx.subType === 'withdrawal')
                  .slice(0, 10)
                  .map((tx, idx) => (
                    <div 
                      key={tx.id}
                      className="flex items-center justify-between p-3 bg-gray-900/50 rounded-lg"
                    >
                      <div className="flex items-center gap-3">
                        <div className={`p-2 rounded ${
                          tx.subType === 'deposit' ? 'bg-red-500/20' : 'bg-green-500/20'
                        }`}>
                          {tx.subType === 'deposit' ? 
                            <FaArrowDown className="text-red-400" /> : 
                            <FaArrowUp className="text-green-400" />
                          }
                        </div>
                        <div>
                          <p className="font-bold">{tx.symbol}</p>
                          <p className="text-xs text-gray-400">{tx.exchange}</p>
                        </div>
                      </div>
                      
                      <div className="text-right">
                        <p className="font-bold">${tx.value.toLocaleString()}</p>
                        <p className="text-xs text-gray-400">
                          {new Date(tx.timestamp).toLocaleTimeString()}
                        </p>
                      </div>
                    </div>
                  ))
                }
              </div>
            </div>
          </div>
        )
      
      case 'team':
        return (
          <div className="space-y-6">
            <DynamicTabGuide config={tabGuides.team} />
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {teamWallets.map((wallet, idx) => (
                <motion.div
                  key={wallet.address}
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: idx * 0.1 }}
                  className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700"
                >
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="font-bold text-white">{wallet.label}</h4>
                      <p className="text-xs text-gray-400 mt-1 font-mono">
                        {wallet.address.slice(0, 6)}...{wallet.address.slice(-4)}
                      </p>
                    </div>
                    <span className={`px-2 py-1 rounded text-xs font-bold ${
                      wallet.status === 'holding' ? 'bg-green-500/20 text-green-400' :
                      wallet.status === 'selling' ? 'bg-red-500/20 text-red-400' :
                      'bg-yellow-500/20 text-yellow-400'
                    }`}>
                      {wallet.status === 'holding' ? 'Î≥¥Ïú† Ï§ë' :
                       wallet.status === 'selling' ? 'Îß§ÎèÑ Ï§ë' : 'Îß§Ïßë Ï§ë'}
                    </span>
                  </div>
                  
                  <div className="space-y-3">
                    <div>
                      <p className="text-sm text-gray-400 mb-1">ÌòÑÏû¨ ÏûîÍ≥†</p>
                      <p className="text-2xl font-bold text-white">
                        {wallet.balance.toLocaleString()} tokens
                      </p>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-3 text-sm">
                      <div>
                        <p className="text-gray-400">ÏµúÍ∑º ÌôúÎèô</p>
                        <p className="font-bold">
                          {Math.floor((Date.now() - wallet.lastActivity.getTime()) / 86400000)}Ïùº Ï†Ñ
                        </p>
                      </div>
                      <div>
                        <p className="text-gray-400">Ïù¥Îèô ÌöüÏàò</p>
                        <p className="font-bold">{wallet.movements}Ìöå</p>
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
            
            {/* Î≤†Ïä§ÌåÖ ÏùºÏ†ï */}
            <div className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700">
              <h3 className="text-xl font-bold mb-4">Î≤†Ïä§ÌåÖ ÏùºÏ†ï</h3>
              <div className="space-y-3">
                <div className="p-4 bg-yellow-500/10 border border-yellow-500/30 rounded-lg">
                  <div className="flex justify-between items-center">
                    <div>
                      <p className="font-bold text-yellow-400">Îã§Ïùå ÎùΩÏóÖ Ìï¥Ï†ú</p>
                      <p className="text-sm text-gray-400 mt-1">Team Vesting Round 3</p>
                    </div>
                    <div className="text-right">
                      <p className="text-2xl font-bold text-white">D-15</p>
                      <p className="text-sm text-gray-400">5,000,000 tokens</p>
                    </div>
                  </div>
                </div>
                
                <div className="p-4 bg-gray-900/50 rounded-lg">
                  <div className="flex justify-between items-center">
                    <div>
                      <p className="font-bold text-gray-300">Advisor Vesting</p>
                      <p className="text-sm text-gray-400 mt-1">ÏõîÍ∞Ñ Ìï¥Ï†ú</p>
                    </div>
                    <div className="text-right">
                      <p className="text-lg font-bold text-white">D-30</p>
                      <p className="text-sm text-gray-400">1,000,000 tokens</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )
      
      case 'institution':
        return (
          <div className="space-y-6">
            <DynamicTabGuide config={tabGuides.institution} />
            
            <div className="grid grid-cols-1 gap-4">
              {institutionHoldings.map((inst, idx) => (
                <motion.div
                  key={inst.name}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: idx * 0.1 }}
                  className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700"
                >
                  <div className="flex justify-between items-center mb-4">
                    <h4 className="text-lg font-bold text-white">{inst.name}</h4>
                    <span className={`px-3 py-1 rounded text-sm font-bold ${
                      inst.change24h > 0 ? 'bg-green-500/20 text-green-400' :
                      inst.change24h < 0 ? 'bg-red-500/20 text-red-400' :
                      'bg-gray-500/20 text-gray-400'
                    }`}>
                      {inst.change24h > 0 ? '+' : ''}{inst.change24h}%
                    </span>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-4">
                    <div>
                      <p className="text-sm text-gray-400 mb-1">Î≥¥Ïú†Îüâ</p>
                      <p className="text-xl font-bold text-white">
                        {inst.amount.toLocaleString()} BTC
                      </p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-400 mb-1">Í∞ÄÏπò</p>
                      <p className="text-xl font-bold text-yellow-400">
                        ${(inst.value / 1000000000).toFixed(2)}B
                      </p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-400 mb-1">ÏóÖÎç∞Ïù¥Ìä∏</p>
                      <p className="text-sm font-bold text-white">
                        {new Date(inst.lastUpdate).toLocaleTimeString()}
                      </p>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
            
            <ComprehensiveAnalysis 
              symbol={selectedSymbol}
              analysisType="institution"
            />
          </div>
        )
      
      case 'smartmoney':
        return (
          <div className="space-y-6">
            <DynamicTabGuide config={tabGuides.smartmoney} />
            
            {/* Ïä§ÎßàÌä∏ Î®∏Îãà Ï∂îÏ†Å */}
            <div className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700">
              <h3 className="text-xl font-bold mb-4">Í≥†ÏàòÏùµ ÏßÄÍ∞ë Ï∂îÏ†Å</h3>
              <div className="space-y-4">
                {transactions
                  .filter(tx => tx.type === 'smart_money')
                  .slice(0, 5)
                  .map((tx, idx) => (
                    <div key={tx.id} className="p-4 bg-gray-900/50 rounded-lg">
                      <div className="flex justify-between items-start">
                        <div>
                          <div className="flex items-center gap-2 mb-2">
                            <FaBrain className="text-green-400" />
                            <span className="font-bold text-white">Ïä§ÎßàÌä∏ Î®∏Îãà #{idx + 1}</span>
                            {tx.confidence && tx.confidence > 0.8 && (
                              <span className="text-xs px-2 py-1 rounded bg-green-500/20 text-green-400">
                                Ïã†Î¢∞ÎèÑ {(tx.confidence * 100).toFixed(0)}%
                              </span>
                            )}
                          </div>
                          <p className="text-sm text-gray-400">
                            {tx.from} ‚Üí {tx.to}
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="text-xl font-bold text-white">
                            ${tx.value.toLocaleString()}
                          </p>
                          <p className="text-sm text-gray-400">
                            {tx.symbol} {tx.amount.toFixed(4)}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          </div>
        )
      
      case 'ai':
        return (
          <div className="space-y-6">
            <DynamicTabGuide config={tabGuides.ai} />
            
            <div className="bg-gradient-to-r from-purple-900/30 to-blue-900/30 backdrop-blur rounded-xl p-6 border border-purple-500/30">
              <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                <FaBrain className="text-purple-400" />
                AI Ï¢ÖÌï© Î∂ÑÏÑù
              </h3>
              
              <div className="space-y-4">
                <div className="p-4 bg-gray-900/50 rounded-lg">
                  <h4 className="font-bold text-yellow-400 mb-2">ÌòÑÏû¨ ÏãúÏû• ÏÉÅÌô©</h4>
                  <p className="text-gray-300">
                    ÏµúÍ∑º 1ÏãúÍ∞Ñ ÎèôÏïà {metrics.whaleActivity}Í±¥Ïùò Í≥†Îûò Í±∞ÎûòÍ∞Ä Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§. 
                    Îß§Ïàò ÏïïÎ†•Ïù¥ {metrics.buyPressure.toFixed(1)}%Î°ú 
                    {metrics.buyPressure > 55 ? ' Îß§Ïàò Ïö∞ÏúÑ' : 
                     metrics.buyPressure < 45 ? ' Îß§ÎèÑ Ïö∞ÏúÑ' : ' Í∑†Ìòï'} ÏÉÅÌÉúÏûÖÎãàÎã§.
                  </p>
                </div>
                
                <div className="p-4 bg-gray-900/50 rounded-lg">
                  <h4 className="font-bold text-yellow-400 mb-2">Ï£ºÏöî Ïã†Ìò∏</h4>
                  <ul className="space-y-2 text-sm text-gray-300">
                    {metrics.teamActivity > 0 && (
                      <li className="flex items-start gap-2">
                        <FaExclamationTriangle className="text-yellow-400 mt-1" />
                        <span>ÌåÄ/Ïû¨Îã® ÏßÄÍ∞ëÏóêÏÑú {metrics.teamActivity}Í±¥Ïùò Ïù¥ÎèôÏù¥ Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§.</span>
                      </li>
                    )}
                    {metrics.institutionActivity > 3 && (
                      <li className="flex items-start gap-2">
                        <FaCheckCircle className="text-green-400 mt-1" />
                        <span>Í∏∞Í¥Ä Ìà¨ÏûêÏûêÎì§Ïùò ÌôúÎ∞úÌïú Îß§ÏßëÏù¥ ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§.</span>
                      </li>
                    )}
                    {metrics.whaleActivity > 5 && (
                      <li className="flex items-start gap-2">
                        <HiLightningBolt className="text-yellow-400 mt-1" />
                        <span>Í≥†ÎûòÎì§Ïùò Ïù¥Î°ÄÏ†ÅÏúºÎ°ú ÎÜíÏùÄ ÌôúÎèôÏù¥ Í∞êÏßÄÎê©ÎãàÎã§.</span>
                      </li>
                    )}
                  </ul>
                </div>
                
                <div className="p-4 bg-gray-900/50 rounded-lg">
                  <h4 className="font-bold text-yellow-400 mb-2">Í∂åÏû• Ï†ÑÎûµ</h4>
                  <p className="text-gray-300">
                    {metrics.riskLevel === 'critical' ? 
                      'ÌòÑÏû¨ ÏúÑÌóò ÏàòÏ§ÄÏù¥ Îß§Ïö∞ ÎÜíÏäµÎãàÎã§. Ïã†Í∑ú Ìè¨ÏßÄÏÖò ÏßÑÏûÖÏùÑ ÏûêÏ†úÌïòÍ≥† Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨Ïóê ÏßëÏ§ëÌïòÏÑ∏Ïöî.' :
                     metrics.riskLevel === 'high' ? 
                      'Ï£ºÏùòÍ∞Ä ÌïÑÏöîÌïú ÏãúÏ†êÏûÖÎãàÎã§. Ìè¨ÏßÄÏÖò ÌÅ¨Í∏∞Î•º Ï§ÑÏù¥Í≥† ÏÜêÏ†àÏÑ†ÏùÑ ÌÉÄÏù¥Ìä∏ÌïòÍ≤å ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.' :
                     metrics.riskLevel === 'medium' ? 
                      'Î≥¥ÌÜµ ÏàòÏ§ÄÏùò ÏãúÏû•ÏûÖÎãàÎã§. Í∏∞Ïà†Ï†Å Î∂ÑÏÑùÍ≥º Ìï®Íªò Ïã†Ï§ëÌïú ÏßÑÏûÖÏùÑ Í∂åÏû•Ìï©ÎãàÎã§.' :
                      'ÏïàÏ†ïÏ†ÅÏù∏ ÏãúÏû• ÏÉÅÌô©ÏûÖÎãàÎã§. Í≥ÑÌöçÎêú Ï†ÑÎûµÏóê Îî∞Îùº ÏßÑÌñâÌïòÎêò Í≥ºÎèÑÌïú Î†àÎ≤ÑÎ¶¨ÏßÄÎäî ÌîºÌïòÏÑ∏Ïöî.'}
                  </p>
                </div>
              </div>
            </div>
            
            <ComprehensiveAnalysis 
              symbol={selectedSymbol}
              analysisType="insider"
            />
          </div>
        )
      
      case 'alerts':
        return (
          <div className="space-y-6">
            <DynamicTabGuide config={tabGuides.alerts} />
            
            <div className="bg-gray-800/50 backdrop-blur rounded-xl p-6 border border-gray-700">
              <h3 className="text-xl font-bold mb-4">ÏïåÎ¶º ÏÑ§Ï†ï</h3>
              
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 bg-gray-900/50 rounded-lg">
                  <div>
                    <p className="font-bold text-white">ÎåÄÍ∑úÎ™® ÌåÄ Ïù¥Îèô</p>
                    <p className="text-sm text-gray-400">ÌåÄ ÏßÄÍ∞ëÏóêÏÑú 100Îßå Îã¨Îü¨ Ïù¥ÏÉÅ Ïù¥Îèô Ïãú</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" className="sr-only peer" defaultChecked />
                    <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-yellow-500"></div>
                  </label>
                </div>
                
                <div className="flex items-center justify-between p-4 bg-gray-900/50 rounded-lg">
                  <div>
                    <p className="font-bold text-white">Í∏∞Í¥Ä Îß§Ïßë/Îß§ÎèÑ</p>
                    <p className="text-sm text-gray-400">Í∏∞Í¥Ä Î≥¥Ïú†Îüâ 5% Ïù¥ÏÉÅ Î≥ÄÎèô Ïãú</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" className="sr-only peer" defaultChecked />
                    <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-yellow-500"></div>
                  </label>
                </div>
                
                <div className="flex items-center justify-between p-4 bg-gray-900/50 rounded-lg">
                  <div>
                    <p className="font-bold text-white">Í±∞ÎûòÏÜå Ïù¥ÏÉÅ ÌùêÎ¶Ñ</p>
                    <p className="text-sm text-gray-400">Îã®Ïùº Í±∞ÎûòÏÜå 1ÏãúÍ∞Ñ 1000Îßå Îã¨Îü¨ Ïù¥ÏÉÅ</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" className="sr-only peer" />
                    <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-yellow-500"></div>
                  </label>
                </div>
                
                <div className="flex items-center justify-between p-4 bg-gray-900/50 rounded-lg">
                  <div>
                    <p className="font-bold text-white">ÏúÑÌóò ÏàòÏ§Ä Î≥ÄÍ≤Ω</p>
                    <p className="text-sm text-gray-400">ÏãúÏä§ÌÖú ÏúÑÌóò ÏàòÏ§ÄÏù¥ High Ïù¥ÏÉÅ Î≥ÄÍ≤Ω Ïãú</p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" className="sr-only peer" defaultChecked />
                    <div className="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-yellow-500"></div>
                  </label>
                </div>
              </div>
              
              <div className="mt-6 p-4 bg-yellow-500/10 border border-yellow-500/30 rounded-lg">
                <div className="flex items-start gap-3">
                  <FaBell className="text-yellow-400 text-xl mt-1" />
                  <div>
                    <p className="font-bold text-yellow-400">ÏïåÎ¶º Ï±ÑÎÑê ÏÑ§Ï†ï</p>
                    <p className="text-sm text-gray-300 mt-1">
                      ÌÖîÎ†àÍ∑∏Îû®, Ïù¥Î©îÏùº, Ïõπ Ìë∏Ïãú ÏïåÎ¶ºÏùÑ ÌÜµÌï¥ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Ï§ëÏöîÌïú Ïã†Ìò∏Î•º Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî.
                    </p>
                    <button className="mt-3 px-4 py-2 bg-yellow-600 hover:bg-yellow-700 rounded-lg text-white font-bold text-sm transition-colors">
                      ÏïåÎ¶º Ï±ÑÎÑê Í¥ÄÎ¶¨
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )
      
      default:
        return null
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white">
      <div className="container mx-auto px-4 py-8">
        {/* Ìó§Îçî */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent">
                ÎÇ¥Î∂ÄÏûê Í±∞Îûò Ï∂îÏ†Å
              </h1>
              <p className="text-gray-400 mt-2">
                ÌåÄ, Í∏∞Í¥Ä, Ïä§ÎßàÌä∏Î®∏ÎãàÏùò Ïã§ÏãúÍ∞Ñ ÏõÄÏßÅÏûÑÏùÑ Ìè¨Ï∞©Ìï©ÎãàÎã§
              </p>
            </div>
            
            <div className="flex items-center gap-4">
              {/* Î™®ÎãàÌÑ∞ÎßÅ ÌÜ†Í∏Ä */}
              <button
                onClick={() => setIsMonitoring(!isMonitoring)}
                className={`px-4 py-2 rounded-lg font-bold transition-all ${
                  isMonitoring 
                    ? 'bg-green-600 hover:bg-green-700 text-white' 
                    : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                }`}
              >
                {isMonitoring ? 'Î™®ÎãàÌÑ∞ÎßÅ Ï§ë' : 'ÏùºÏãúÏ†ïÏßÄ'}
              </button>
              
              {/* ÏïåÎ¶º ÌÜ†Í∏Ä */}
              <button
                onClick={() => setNotifications(!notifications)}
                className={`p-2 rounded-lg transition-all ${
                  notifications 
                    ? 'bg-yellow-600 hover:bg-yellow-700 text-white' 
                    : 'bg-gray-700 hover:bg-gray-600 text-gray-300'
                }`}
              >
                <FaBell />
              </button>
            </div>
          </div>
          
          {/* Ïã¨Î≥º ÏÑ†ÌÉù */}
          <div className="flex gap-2 flex-wrap">
            {['BTC', 'ETH', 'BNB', 'SOL', 'MATIC'].map(symbol => (
              <button
                key={symbol}
                onClick={() => setSelectedSymbol(symbol)}
                className={`px-4 py-2 rounded-lg font-bold transition-all ${
                  selectedSymbol === symbol
                    ? 'bg-yellow-600 text-white'
                    : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
                }`}
              >
                {symbol}
              </button>
            ))}
          </div>
        </motion.div>

        {/* ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
        <div className="flex gap-4 mb-8 border-b border-gray-800 overflow-x-auto">
          {[
            { id: 'overview', label: 'Í∞úÏöî', icon: <FaChartLine /> },
            { id: 'exchange', label: 'Í±∞ÎûòÏÜå ÌùêÎ¶Ñ', icon: <FaExchangeAlt /> },
            { id: 'team', label: 'ÌåÄ/Ïû¨Îã®', icon: <FaUserSecret /> },
            { id: 'institution', label: 'Í∏∞Í¥Ä', icon: <FaBuilding /> },
            { id: 'smartmoney', label: 'Ïä§ÎßàÌä∏ Î®∏Îãà', icon: <FaBrain /> },
            { id: 'ai', label: 'AI Ïù∏ÏÇ¨Ïù¥Ìä∏', icon: <HiLightningBolt /> },
            { id: 'alerts', label: 'ÏïåÎ¶º', icon: <FaBell /> }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`flex items-center gap-2 pb-4 px-4 font-medium transition-all whitespace-nowrap ${
                activeTab === tab.id
                  ? 'text-yellow-400 border-b-2 border-yellow-400'
                  : 'text-gray-400 hover:text-white'
              }`}
            >
              {tab.icon}
              {tab.label}
            </button>
          ))}
        </div>

        {/* ÌÉ≠ Ïª®ÌÖêÏ∏† */}
        {renderTabContent()}

        {/* ÌïòÎã® CTA */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="mt-12 p-6 bg-gradient-to-r from-yellow-900/50 to-orange-900/50 rounded-xl border border-yellow-500/30"
        >
          <div className="text-center">
            <h3 className="text-2xl font-bold mb-2">ÌîÑÎ¶¨ÎØ∏ÏóÑ ÎÇ¥Î∂ÄÏûê Ï∂îÏ†Å</h3>
            <p className="text-gray-400 mb-4">
              Ïã§ÏãúÍ∞Ñ Ïò®Ï≤¥Ïù∏ Îç∞Ïù¥ÌÑ∞, Í≥†Í∏â AI Î∂ÑÏÑù, ÎßûÏ∂§Ìòï ÏïåÎ¶ºÏùÑ Î™®Îëê Ïù¥Ïö©ÌïòÏÑ∏Ïöî
            </p>
            <button className="px-8 py-3 bg-gradient-to-r from-yellow-600 to-orange-600 rounded-lg font-bold hover:from-yellow-700 hover:to-orange-700 transition-all">
              ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏóÖÍ∑∏Î†àÏù¥Îìú
            </button>
          </div>
        </motion.div>
      </div>
    </div>
  )
}