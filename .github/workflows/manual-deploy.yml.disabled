name: Manual Deploy (Alternative)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install and Build
      run: |
        cd frontend
        npm ci
        npm run build
    
    - name: Deploy via SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.AWS_SERVER_KEY }}
      run: |
        # SSH 키 설정
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Known hosts 추가
        ssh-keyscan -H 13.209.84.93 >> ~/.ssh/known_hosts
        
        # 빌드된 파일 압축
        cd frontend
        tar -czf build.tar.gz .next package.json package-lock.json
        
        # 파일 전송
        scp -i ~/.ssh/deploy_key build.tar.gz ubuntu@13.209.84.93:~/monstas7/frontend/
        
        # 서버에서 압축 해제 및 재시작
        ssh -i ~/.ssh/deploy_key ubuntu@13.209.84.93 << 'ENDSSH'
          cd ~/monstas7/frontend
          
          # 백업 생성
          if [ -d ".next" ]; then
            mv .next .next.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # 압축 해제
          tar -xzf build.tar.gz
          rm build.tar.gz
          
          # PM2 재시작
          cd ..
          pm2 restart ecosystem.config.js --update-env
          pm2 save
          
          # 정리
          find . -name "*.backup.*" -mtime +7 -delete
          
          echo "✅ Deployment completed!"
          pm2 status
        ENDSSH
    
    - name: Cleanup
      if: always()
      run: |
        rm -rf ~/.ssh
        rm -f frontend/build.tar.gz