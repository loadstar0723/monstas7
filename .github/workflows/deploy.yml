name: Zero-Downtime Deploy (무중단 배포)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy-without-downtime:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: 🚀 무중단 배포 시작
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: 13.209.84.93
          username: ubuntu
          key: ${{ secrets.AWS_SERVER_KEY }}
          script: |
            set -e  # 에러 발생 시 즉시 중단
            
            # 🔄 블루-그린 배포 전략
            echo "🎯 무중단 배포 시작..."
            
            # 현재 실행 중인 버전 확인
            CURRENT_DIR="monstas7"
            NEW_DIR="monstas7_new"
            BACKUP_DIR="monstas7_backup"
            
            # 1️⃣ 새 버전을 별도 디렉토리에 준비
            echo "📦 새 버전 준비 중..."
            
            # 기존 새 디렉토리 제거
            rm -rf ~/$NEW_DIR
            
            # 현재 버전 복사 (node_modules와 .next 캐시 보존)
            if [ -d ~/$CURRENT_DIR ]; then
              echo "🔄 기존 프로젝트 복사 중..."
              cp -r ~/$CURRENT_DIR ~/$NEW_DIR
              cd ~/$NEW_DIR
            else
              echo "🆕 새 프로젝트 클론 중..."
              git clone https://github.com/loadstar0723/monstas7.git ~/$NEW_DIR
              cd ~/$NEW_DIR
            fi
            
            # 2️⃣ 최신 코드만 업데이트 (캐시 보존)
            echo "📥 최신 코드 가져오는 중..."
            git fetch origin master
            git reset --hard origin/master
            
            # 3️⃣ 증분 설치 (변경된 패키지만)
            cd frontend
            
            # package.json이 변경된 경우만 설치
            if ! diff package.json ../monstas7/frontend/package.json > /dev/null 2>&1; then
              echo "📦 변경된 패키지 설치 중..."
              npm ci --prefer-offline --no-audit
            else
              echo "✅ 패키지 변경 없음 - 설치 스킵"
            fi
            
            # 4️⃣ Prisma 재생성 (빠름)
            npx prisma generate
            
            # 5️⃣ 증분 빌드 (캐시 활용)
            echo "🔨 증분 빌드 중..."
            
            # 환경변수 설정
            cat > .env.production << 'EOF'
            NODE_ENV=production
            NEXTAUTH_SECRET=monstas7-secret-key-2024-production-secure
            NEXTAUTH_URL=http://13.209.84.93:3000
            DATABASE_URL="file:./prisma/dev.db"
            NEXT_PUBLIC_API_URL=http://13.209.84.93:3000/api
            EOF
            
            # 빌드 (.next 캐시 활용으로 빠름)
            npm run build
            
            # 6️⃣ PM2 생태계 설정 업데이트
            cat > ecosystem.config.js << 'EOF'
            module.exports = {
              apps: [{
                name: 'monsta-blue',
                script: 'npm',
                args: 'start',
                cwd: './frontend',
                instances: 1,
                exec_mode: 'fork',
                autorestart: true,
                watch: false,
                max_memory_restart: '600M',
                env: {
                  NODE_ENV: 'production',
                  PORT: 3001,  // 블루 버전은 3001 포트
                  NEXT_TELEMETRY_DISABLED: 1,
                  HOST: '0.0.0.0'
                }
              }]
            }
            EOF
            
            # 7️⃣ 새 버전을 다른 포트(3001)에서 시작
            echo "🔵 블루 버전 시작 중..."
            pm2 delete monsta-blue 2>/dev/null || true
            pm2 start ecosystem.config.js
            
            # 8️⃣ 새 버전 헬스 체크 (최대 30초 대기)
            echo "🏥 새 버전 헬스 체크..."
            for i in {1..30}; do
              if curl -f http://localhost:3001 > /dev/null 2>&1; then
                echo "✅ 새 버전 정상 작동 확인!"
                break
              fi
              echo "⏳ 대기 중... ($i/30)"
              sleep 1
            done
            
            # 9️⃣ 트래픽 전환 (심볼릭 링크 교체)
            echo "🔄 트래픽 전환 중..."
            
            # 백업 생성
            if [ -d ~/$CURRENT_DIR ]; then
              rm -rf ~/$BACKUP_DIR
              mv ~/$CURRENT_DIR ~/$BACKUP_DIR
            fi
            
            # 심볼릭 링크 교체 (원자적 작업)
            mv ~/$NEW_DIR ~/$CURRENT_DIR
            
            # 🔟 기존 버전 종료 및 새 버전을 3000 포트로 전환
            cd ~/$CURRENT_DIR/frontend
            
            # 3000 포트용 설정
            cat > ecosystem.config.js << 'EOF'
            module.exports = {
              apps: [{
                name: 'monsta-prod',
                script: 'npm',
                args: 'start',
                cwd: './frontend',
                instances: 2,  // 클러스터 모드로 2개 인스턴스
                exec_mode: 'cluster',  // 클러스터 모드
                autorestart: true,
                watch: false,
                max_memory_restart: '600M',
                env: {
                  NODE_ENV: 'production',
                  PORT: 3000,
                  NEXT_TELEMETRY_DISABLED: 1,
                  HOST: '0.0.0.0'
                },
                wait_ready: true,
                listen_timeout: 10000,
                kill_timeout: 5000
              }]
            }
            EOF
            
            # 기존 프로세스 종료 후 새로 시작
            pm2 delete monsta-blue 2>/dev/null || true
            pm2 delete monsta-prod 2>/dev/null || true
            pm2 start ecosystem.config.js
            
            pm2 save
            pm2 startup || true
            
            # 1️⃣1️⃣ 최종 확인
            echo "🎉 무중단 배포 완료!"
            echo "📊 PM2 상태:"
            pm2 status
            
            # 백업 정리 (선택적)
            if [ -d ~/$BACKUP_DIR ]; then
              echo "🗑️ 이전 백업 제거 중..."
              rm -rf ~/$BACKUP_DIR
            fi
            
            echo "✅ 배포 완료 시간: $(date)"
            echo "🌐 서비스 URL: http://13.209.84.93:3000"
      
      - name: ✅ 배포 성공 알림
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.DEPLOY_TELEGRAM_CHAT_ID }}
          token: ${{ secrets.DEPLOY_TELEGRAM_BOT_TOKEN }}
          message: |
            ✅ 무중단 배포 성공!
            
            🚀 다운타임: 0초
            📝 커밋: ${{ github.event.head_commit.message }}
            🌐 URL: http://13.209.84.93:3000
            
            서버가 한 번도 끊기지 않고 배포되었습니다!