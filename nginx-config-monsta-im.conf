# Nginx 설정 파일 - monsta.im
# 이 파일을 서버의 /etc/nginx/sites-available/monsta-im 에 복사하세요

# HTTP 서버 블록 (80 포트) - SSL 발급 전 필요
server {
    listen 80;
    listen [::]:80;
    server_name monsta.im www.monsta.im;

    # Let's Encrypt 인증을 위한 디렉토리
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    # 나머지 요청은 HTTPS로 리다이렉트 (SSL 발급 후)
    # location / {
    #     return 301 https://$server_name$request_uri;
    # }

    # SSL 발급 전 임시 프록시 설정
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 백엔드 API
    location /api {
        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# HTTPS 서버 블록 (443 포트) - SSL 발급 후 Certbot이 자동 생성
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name monsta.im www.monsta.im;
#
#     # SSL 인증서 경로 (Let's Encrypt)
#     ssl_certificate /etc/letsencrypt/live/monsta.im/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/monsta.im/privkey.pem;
#     include /etc/letsencrypt/options-ssl-nginx.conf;
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
#
#     # 보안 헤더
#     add_header X-Frame-Options "SAMEORIGIN" always;
#     add_header X-Content-Type-Options "nosniff" always;
#     add_header X-XSS-Protection "1; mode=block" always;
#     add_header Referrer-Policy "strict-origin-when-cross-origin" always;
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#
#     # 프론트엔드 (Next.js)
#     location / {
#         proxy_pass http://localhost:3000;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_cache_bypass $http_upgrade;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
#
#     # 백엔드 API
#     location /api {
#         proxy_pass http://localhost:8000;
#         proxy_http_version 1.1;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
#
#     # WebSocket 지원
#     location /ws {
#         proxy_pass http://localhost:3000;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
#
#     # 정적 파일 캐싱
#     location /_next/static {
#         proxy_pass http://localhost:3000;
#         expires 1y;
#         add_header Cache-Control "public, immutable";
#     }
# }